#ifndef _MYCHECK_TOOLS
#define _MYCHECK_TOOLS

/***************************************************************
  *  @brief     比较两个字符串的大小 
  *  @param     char* a,b
  *  @note      无 
  *  @Sample usage:    自动识别是否都为number，是的话就换一套方法 
 **************************************************************/
int ValueCmp(char *a,char *b);


/***************************************************************
  *  @brief     逻辑运算
  *  @param     struct VLA 逻辑运算式子 
  *  @note      无 
  *  @Sample usage:    // 5 - and ; 1 - or; 2 - (; 3 - ); 4 - !
 **************************************************************/
bool logical_calc(struct VLA f);


/***************************************************************
  *  @brief     从文件中读入字符串并且用适合的空间存储它 
  *  @param     char** 被读入的字符串，FILE*读入来源 
  *  @note      fgets会把最后一个'\n'保留 
  *  @Sample usage:   读从文件中入字符串并且用适合的空间存储它 
 **************************************************************/
void _templar_GetTightString_Getline(char**, FILE *);


/***************************************************************
  *  @brief     把字符串变成个数字 
  *  @param     char* 字符串
  *  @note      支持小数点、符号 
  *  @Sample usage:   把字符串变成个数字 
 **************************************************************/
double _templar_StringToNumber(char *str);


/***************************************************************
  *  @brief     判断字符串中有没有':' 
  *  @param     char* 字符串
  *  @note      用于合法性检查 
  *  @Sample usage:   判断字符串中有没有':' ，有输出1，否则输出0 
 **************************************************************/
bool _templar_HaveColon(char*);


/***************************************************************
  *  @brief     清理VLA
  *  @param     VLA* 操作的动态长度数组 
  *  @note     无
  *  @Sample usage:   清理VLA
 **************************************************************/
void _templar_vla_clear(struct VLA* a);


/***************************************************************
  *  @brief     创建VLA
  *  @param     VLA* 操作的动态长度数组 
  *  @note     无
  *  @Sample usage:   创建VLA
 **************************************************************/
void _templar_vla_create(struct VLA* a);


/***************************************************************
  *  @brief     插入VLA
  *  @param     VLA* 操作的动态长度数组，插入的数据 
  *  @note     支持小数点、符号 
  *  @Sample usage:   插入VLA
 **************************************************************/
void _templar_vla_push(struct VLA* a,int t);


/***************************************************************
  *  @brief     判断字符串中是不是数字 
  *  @param     char* 字符串
  *  @note      用于合法性检查 
  *  @Sample usage:   判断字符串中是不是数字 ，有输出1，否则输出0 
 **************************************************************/
bool _templar_JudgeStringIsNumber(char *a);

#endif
